// Originally generated by the template in CodeDAO
package kotlinadventofcode.`2023`

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import kotlinadventofcode.`2023`.`2023-05`.ResourceMap
import kotlinadventofcode.`2023`.`2023-05`.Resource


class `2023-05-Test` {

    private infix fun String.when1runsWith(input: String) {
        assertEquals(this, `2023-05`().runPart1(input))
    }

    private infix fun String.when2runsWith(input: String) {
        assertEquals(this, `2023-05`().runPart2(input))
    }

    private val exampleInput = """seeds: 79 14 55 13

seed-to-soil map:
50 98 2
52 50 48

soil-to-fertilizer map:
0 15 37
37 52 2
39 0 15

fertilizer-to-water map:
49 53 8
0 11 42
42 0 7
57 7 4

water-to-light map:
88 18 7
18 25 70

light-to-temperature map:
45 77 23
81 45 19
68 64 13

temperature-to-humidity map:
0 69 1
1 0 69

humidity-to-location map:
60 56 37
56 93 4"""

    @Test
    fun testExamplePart1() {
        assertEquals("35", `2023-05`().runPart1(exampleInput))
    }

    @Test fun testDefaultPart1() {
        assertEquals("424490994", `2023-05`().runPart1())
    }

    @Test
    fun testExamplePart2() {
        assertEquals("46", `2023-05`().runPart2(exampleInput))
    }

    @Test fun testDefaultPart2() {
        assertEquals("15290096", `2023-05`().runPart2())
    }


    @Test
    fun testResourceMap() {
        val resourceMap = ResourceMap(
            `2023-05`.ResourceType.SEED, `2023-05`.ResourceType.SOIL, listOf(
                `2023-05`.MapRange(50.toBigInteger(), 98.toBigInteger(), 2.toBigInteger()),
                `2023-05`.MapRange(52.toBigInteger(), 50.toBigInteger(), 48.toBigInteger()),
                `2023-05`.MapRange(110.toBigInteger(), 10.toBigInteger(), 5.toBigInteger()))) // 10-14 -> 110-113

        assertEquals(
            setOf(50.toBigInteger()..51.toBigInteger()),
            resourceMap.mapRange(98.toBigInteger()..99.toBigInteger()))

        // all before
        assertEquals(
            setOf(0.toBigInteger()..5.toBigInteger()),
            resourceMap.mapRange(0.toBigInteger()..5.toBigInteger()))

        // all after
        assertEquals(
            setOf(20.toBigInteger()..40.toBigInteger()),
            resourceMap.mapRange(20.toBigInteger()..40.toBigInteger()))

        // range exactly equal
        assertEquals(
            setOf(110.toBigInteger()..114.toBigInteger()),
            resourceMap.mapRange(10.toBigInteger()..14.toBigInteger()))

        // range fits inside
        assertEquals(
            setOf(111.toBigInteger()..113.toBigInteger()),
            resourceMap.mapRange(11.toBigInteger()..13.toBigInteger()))

        // range surrounds
        assertEquals(
            setOf(
                110.toBigInteger()..114.toBigInteger(),
                9.toBigInteger()..9.toBigInteger(),
                15.toBigInteger()..15.toBigInteger()
            ),
            resourceMap.mapRange(9.toBigInteger()..15.toBigInteger())
        )

        // range start is before, but ends is inside
        assertEquals(
            setOf(
                110.toBigInteger()..113.toBigInteger(),
                9.toBigInteger()..9.toBigInteger(),
            ),
            resourceMap.mapRange(9.toBigInteger()..13.toBigInteger())
        )

        // range start is inside, but ends is after
        assertEquals(
            setOf(
                111.toBigInteger()..114.toBigInteger(),
                15.toBigInteger()..15.toBigInteger()
            ),
            resourceMap.mapRange(11.toBigInteger()..15.toBigInteger())
        )

        // start is before, and end is on the first edge
        assertEquals(
            setOf(
                110.toBigInteger()..110.toBigInteger(),
                9.toBigInteger()..9.toBigInteger(),
            ),
            resourceMap.mapRange(9.toBigInteger()..10.toBigInteger())
        )

        // start is before, and end is on the second edge
        assertEquals(
            setOf(
                110.toBigInteger()..114.toBigInteger(),
                9.toBigInteger()..9.toBigInteger()
            ),
            resourceMap.mapRange(9.toBigInteger()..14.toBigInteger())
        )

        // start is on first edge and end is in middle
        assertEquals(
            setOf(
                110.toBigInteger()..113.toBigInteger(),
            ),
            resourceMap.mapRange(10.toBigInteger()..13.toBigInteger())
        )

        // start is on first edge and end is after
        assertEquals(
            setOf(
                110.toBigInteger()..114.toBigInteger(),
                15.toBigInteger()..15.toBigInteger()
            ),
            resourceMap.mapRange(10.toBigInteger()..15.toBigInteger())
        )

        // start is in middle and end is on edge
        assertEquals(
            setOf(
                111.toBigInteger()..114.toBigInteger(),
            ),
            resourceMap.mapRange(11.toBigInteger()..14.toBigInteger())
        )

        // start is in middle and end is after
        assertEquals(
            setOf(
                111.toBigInteger()..114.toBigInteger(),
                15.toBigInteger()..15.toBigInteger()
            ),
            resourceMap.mapRange(11.toBigInteger()..15.toBigInteger())
        )

        // start is on second edge and end is after
        assertEquals(
            setOf(
                114.toBigInteger()..114.toBigInteger(),
                15.toBigInteger()..15.toBigInteger()
            ),
            resourceMap.mapRange(14.toBigInteger()..15.toBigInteger())
        )
    }
}
