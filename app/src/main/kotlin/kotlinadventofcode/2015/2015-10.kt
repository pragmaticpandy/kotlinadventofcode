// Originally generated by the template in CodeDAO
package kotlinadventofcode.`2015`

import com.github.h0tk3y.betterParse.combinators.map
import com.github.h0tk3y.betterParse.combinators.oneOrMore
import com.github.h0tk3y.betterParse.combinators.use
import com.github.h0tk3y.betterParse.combinators.zeroOrMore
import com.github.h0tk3y.betterParse.grammar.Grammar
import com.github.h0tk3y.betterParse.grammar.parseToEnd
import com.github.h0tk3y.betterParse.lexer.regexToken
import com.github.h0tk3y.betterParse.parser.Parser
import kotlinadventofcode.Day

class `2015-10` : Day {

    fun parse(input: String): String {
        val grammar = object: Grammar<String>() {

            /**
             * (\d) is the first capturing group. \1 then matches what was matched by that groupâ€”a
             * specific digit, not anything in the class \d
             */
            val digits by regexToken("""(\d)\1*""")

            val encodedDigits by digits use { text.length.toString() + text[0] }
            override val rootParser by oneOrMore(encodedDigits) map { it.joinToString(separator = "") }
        }

        return grammar.parseToEnd(input)
    }

    /**
     * After verifying your solution on the AoC site, run `./ka continue` to add a test for it.
     */
    override fun runPart1(input: String): String {
        var result: String = input
        repeat(40) { result = parse(result) }
        return result.length.toString()
    }

    /**
     * After verifying your solution on the AoC site, run `./ka continue` to add a test for it.
     */
    override fun runPart2(input: String): String {
        var result: String = input
        repeat(50) { result = parse(result) }
        return result.length.toString()
    }

    override val defaultInput = """1113222113"""
}