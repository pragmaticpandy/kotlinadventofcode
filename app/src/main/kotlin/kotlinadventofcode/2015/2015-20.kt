// Originally generated by the template in CodeDAO
package kotlinadventofcode.`2015`

import kotlinadventofcode.Day

class `2015-20` : Day {

    private fun parse(input: String): Int {
        return input.toInt()
    }

    /**
     * Brute force got the answer 786240 in about 20 minutes.
     *
     * The optimization here gets the time down to a minute or two and is a bit unintuitive—use an
     * array and calculate each elf's presents all the way out.
     * It seems like it wouldn't help since you are wasting time calculating presents for houses way
     * bigger that what the answer will ultimately be.
     * But, the number of calculations required per elf drops really quickly—e.g. only 1/100 of the
     * array needs to be updated on the 100th iteration.
     */
    override fun runPartOneNoUI(input: String): String {
        val target = parse(input)
        val presents: Array<Int> = Array(target) { 0 }
        (1 until target).forEach { elf ->
            generateSequence(elf) { it + elf }.takeWhile { it < target }
                .forEach { presents[it] += elf * 10 }

            if (presents[elf] >= target) return elf.toString()
        }

        throw Exception("Couldn't find solution.")
    }

    /**
     * After verifying your solution on the AoC site, run `./ka continue` to add a test for it.
     */
    override fun runPartTwoNoUI(input: String): String {
        val target = parse(input)
        val presents: Array<Int> = Array(target) { 0 }
        (1 until target).forEach { elf ->
            (1..50).map { elf * it } .filter { it < target } .forEach { presents[it] += elf * 11 }
            if (presents[elf] >= target) return elf.toString()
        }

        throw Exception("Couldn't find solution.")
    }

    override val defaultInput = """34000000"""
}