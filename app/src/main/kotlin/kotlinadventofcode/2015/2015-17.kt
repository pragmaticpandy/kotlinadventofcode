// Originally generated by the template in CodeDAO
package kotlinadventofcode.`2015`

import com.github.h0tk3y.betterParse.combinators.separatedTerms
import com.github.h0tk3y.betterParse.combinators.use
import com.github.h0tk3y.betterParse.grammar.Grammar
import com.github.h0tk3y.betterParse.grammar.parseToEnd
import com.github.h0tk3y.betterParse.lexer.literalToken
import com.github.h0tk3y.betterParse.lexer.regexToken
import com.github.h0tk3y.betterParse.parser.Parser
import kotlinadventofcode.Day
import java.math.BigInteger

const val eggnogAmount = 150
class `2015-17` : Day {

    private fun parse(input: String): List<Int> {
        val grammar = object: Grammar<List<Int>>() {
            val newline by literalToken("\n")
            val numToken by regexToken("""[0-9]+""")
            val num by numToken use { text.toInt() }
            override val rootParser: Parser<List<Int>> by separatedTerms(num, newline)
        }

        return grammar.parseToEnd(input)
    }

    /**
     * After verifying your solution on the AoC site, run `./ka continue` to add a test for it.
     */
    override fun runPart1(input: String): String {

        val combinationsCache: MutableMap<Pair<List<Int>, Int>, BigInteger> = mutableMapOf()
        fun numCombinations(containerSizes: List<Int>, target: Int): BigInteger {
            if (target == 0) return 1.toBigInteger()
            if (target < 0) return 0.toBigInteger()
            if (containerSizes.isEmpty()) return 0.toBigInteger()

            return combinationsCache.getOrPut(containerSizes to target) {
                var result = 0.toBigInteger()
                for (index in containerSizes.indices) {
                    result += numCombinations(
                        containerSizes.subList(index + 1, containerSizes.size),
                        target - containerSizes[index]
                    )
                }

                result
            }
        }

        return numCombinations(parse(input), eggnogAmount).toString()
    }

    /**
     * After verifying your solution on the AoC site, run `./ka continue` to add a test for it.
     */
    override fun runPart2(input: String): String {

        val containerSizes = parse(input)

        fun minContainers(containerSizes: List<Int>, target: Int): Int? {
            if (target == 0) return 0
            if (target < 0) return null
            if (containerSizes.isEmpty()) return null

            return containerSizes.indices
                .mapNotNull {
                    minContainers(
                        containerSizes.subList(it + 1, containerSizes.size),
                        target - containerSizes[it])}
                .minOrNull()
                ?.plus(1)
        }

        fun numCombinations(containerSizes: List<Int>, volume: Int, numContainers: Int): Int {
            if (volume == 0 && numContainers == 0) return 1
            if (volume < 0) return 0
            if (numContainers < 0) return 0
            if (containerSizes.isEmpty()) return 0

            return containerSizes.indices.sumOf {
                numCombinations(
                    containerSizes.subList(it + 1, containerSizes.size),
                    volume - containerSizes[it],
                    numContainers - 1)}
        }

        return numCombinations(
                containerSizes,
                eggnogAmount,
                minContainers(containerSizes, eggnogAmount) ?: throw Exception("No combinations found.")
            ).toString()
    }

    override val defaultInput = """11
30
47
31
32
36
3
1
5
3
32
36
15
11
46
26
28
1
19
3"""
}